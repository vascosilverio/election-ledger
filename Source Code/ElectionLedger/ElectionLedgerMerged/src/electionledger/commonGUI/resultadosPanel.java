package electionledger.commonGUI;

import electionledger.node.RemoteInterface;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 *
 * @author Rúben Garcia Nº16995, Vasco Silvério Nº22350
 */
public class resultadosPanel extends javax.swing.JPanel {

    CopyOnWriteArrayList<String> candidates;//Array list concorrente de candidatos
    RemoteInterface remote;                 //Objeto remoto

    public resultadosPanel(RemoteInterface MainRemote, ConcurrentHashMap<String, PublicKey> electors) {
        initComponents();
        remote = MainRemote;
        this.candidates = candidates;
        try {
            resultsText(remote.masterPrivateKey());
        } catch (Exception e) {
        }

    }

    /**
     * Atualiza o componente de texto com os resultados da eleição usando a
     * chave privada fornecida.
     *
     * @param key Chave privada para obter os resultados
     */
    public void resultsText(PrivateKey key) {
        try {
            // Obtém a lista de candidatos da interface remota
            CopyOnWriteArrayList<String> candidates = remote.getCandidates();

            // Inicializa a string de resultados
            String res = "Resultados da Eleição\n\n";

            // Itera sobre os candidatos e obtém seus resultados
            for (String cand : candidates) {
                res += cand + " : " + remote.getResults(cand, key) + " Votos\n";
            }

            // Atualiza o componente de texto com os resultados
            resultadosText.setText(res);
        } catch (Exception e) {
            // Trata exceções, se ocorrerem
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultadosText = new javax.swing.JTextArea();

        setPreferredSize(new java.awt.Dimension(500, 500));

        resultadosText.setColumns(50);
        resultadosText.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        resultadosText.setRows(4);
        resultadosText.setAutoscrolls(false);
        resultadosText.setMinimumSize(new java.awt.Dimension(1026, 500));
        resultadosText.setPreferredSize(new java.awt.Dimension(1026, 500));
        jScrollPane1.setViewportView(resultadosText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1026, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(443, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea resultadosText;
    // End of variables declaration//GEN-END:variables
}
