package electionledger.commonGUI;

import electionledger.masterGUI.MasterPanel;
import electionledger.node.AutomaticP2P;
import electionledger.node.RemoteInterface;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import electionledger.utils.GuiUtils;

import javax.swing.JDialog;
import javax.swing.SwingUtilities;

/**
 *
 * @author Rúben Garcia Nº16995, Vasco Silvério Nº22350
 */
public class minersPanel extends JPanel {

    RemoteInterface remote; //Objeto remoto

    public minersPanel() {
        initComponents();
        remote = AutomaticP2P.getConnectedNode();
        //networkRefresh();

    }

    /**
     * Atualiza periodicamente as informações da rede. Inicia uma thread para
     * verificar a conexão com os servidores na rede e exibir mensagens
     * relacionadas. A thread permanece ativa, verificando a conexão a cada 500
     * milissegundos.
     *
     * @throws InterruptedException Se ocorrer uma interrupção durante a espera
     * da thread.
     */
    public void networkRefresh() {
        // Inicialização da thread para atualizar as informações da rede
        Thread thr;
        thr = new Thread(() -> {
            try {
                // Loop contínuo para verificar a conexão com os servidores na rede
                while (true) {
                    // Aguarda por 500 milissegundos antes de cada verificação
                    Thread.currentThread().sleep(5000);

                    // Itera sobre os servidores na rede
                    for (RemoteInterface node : remote.getNetwork()) {
                        // Exibe uma mensagem indicando a conexão com cada servidor
                        if (AutomaticP2P.isAlive(node)) {
                            this.onMessage("Network | ", "Ligado ao servidor: " + node.getAdress());
                        }
                    }
                }
            } catch (Exception ex) {
                // Registra qualquer exceção que ocorra durante a execução da thread
                Logger.getLogger(MasterPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

        // Inicia a thread
        thr.start();
    }

    /**
     * Obtém a interface remota associada a esta instância.
     *
     * @return interface remota
     */
    public RemoteInterface getRemote() {
        return remote;

    }

    private void nodeDown() {
        JOptionPane optionPane = new JOptionPane(
                "A ligação ao servidor foi perdida. Volte a entrar na aplicação.",
                JOptionPane.ERROR_MESSAGE,
                JOptionPane.OK_OPTION,
                null,
                new Object[]{},
                null);

        // Criar um JDialog para envolver o JOptionPane
        JDialog dialog = optionPane.createDialog(this, "Erro de ligação.");

        // Mostrar o JDialog
        dialog.setVisible(true);
    }

    /**
     * Manipula uma exceção, exibindo uma mensagem de erro e registando no log.
     *
     * @param title título da mensagem de erro
     * @param ex exceção a ser tratada
     */
    public void onException(String title, Exception ex) {
        // Adiciona a mensagem de erro ao componente de log com cores específicas
        GuiUtils.addText(txtLog, title, ex.getMessage(), Color.RED, Color.MAGENTA);

        // Exibe uma caixa de diálogo com a mensagem de erro
        JOptionPane.showMessageDialog(this, ex.getMessage(),
                title, JOptionPane.ERROR_MESSAGE);

        // Registra a exceção no log
        Logger.getAnonymousLogger().log(Level.SEVERE, null, ex);
    }

    /**
     * Manipula uma mensagem, exibindo-a no componente de log.
     *
     * @param title título da mensagem
     * @param msg conteúdo da mensagem
     */
    public void onMessage(String title, String msg) {
        // Adiciona a mensagem ao componente de log com cores específicas
        GuiUtils.addText(txtLog, title, msg, Color.GREEN, Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextPane();

        jScrollPane3.setPreferredSize(new java.awt.Dimension(64, 200));

        txtLog.setBackground(new java.awt.Color(0, 0, 0));
        txtLog.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtLog.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jScrollPane3.setViewportView(txtLog);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1250, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 565, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane txtLog;
    // End of variables declaration//GEN-END:variables
}
