package electionledger.masterGUI;

import electionledger.node.RemoteInterface;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.PublicKey;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import electionledger.utils.SecurityUtils;
import java.util.Base64;
import javax.swing.SwingUtilities;

/**
 *
 * @author Rúben Garcia Nº16995, Vasco Silvério Nº22350
 */
public class eleitoresPanel extends javax.swing.JPanel {

    RemoteInterface remote;                             //Objeto remoto
    ConcurrentHashMap<String, PublicKey> electorsInit;  //Hashmap concorrente de CC's de eleitor e a sua public key

    public eleitoresPanel(RemoteInterface MainRemote, ConcurrentHashMap<String, PublicKey> MainElectors) {
        try {
            remote = MainRemote;
            electorsInit = MainElectors;
            initComponents();
            refreshElectors();
        } catch (Exception e) {
        }
    }

    /**
     * Atualiza periodicamente a representação gráfica dos eleitores.
     */
    public void refreshElectors() {
        Thread thr = new Thread(
                () -> {
                    while (true) {
                        try {
                            Thread.currentThread().sleep(500);
                            SwingUtilities.invokeLater(() -> {
                                try {
                                    printElectors();
                                } catch (Exception ex) {
                                    Logger.getLogger(eleitoresPanel.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            });
                        } catch (Exception ex) {
                            Logger.getLogger(MasterPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
        );
        thr.start();
    }

    /**
     * Mostra os eleitores na interface gráfica.
     *
     * @throws Exception Lança exceção em caso de erro ao mostrar os eleitores
     */
    public void printElectors() throws Exception {
        File folder = new File("users");
        File[] pubKeys = folder.listFiles();

        // Verifica cada arquivo dentro da pasta "users"
        if (pubKeys != null) {
            for (File pubKey : pubKeys) {
                // Deve ser um arquivo .pubkey
                if (pubKey.isFile() && pubKey.getName().endsWith(".pubkey")) {
                    try {
                        // Obtém o nome de usuário
                        String user = pubKey.getName().replace(".pubkey", "");
                        // Obtém a chave pública do usuário
                        byte[] publicKeyData = Files.readAllBytes(Paths.get(pubKey.toURI()));
                        PublicKey publicKey = SecurityUtils.getPublicKey(publicKeyData);
                        // Adiciona o eleitor à lista se ainda não estiver presente
                        if (!electorsInit.contains(user)) {
                            electorsInit.put(user, publicKey);
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(MasterPanel.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(MasterPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

        lstElectors.removeAll();
        DefaultListModel<String> modelElectors = new DefaultListModel<>();
        electorsInit.forEach((user, pubKey) -> {
            try {
                String pKey = Base64.getEncoder().encodeToString(pubKey.getEncoded());
                String displayText;
                int state = remote.stateElector(pKey);

                if (state == 1) {
                    displayText = "TOKEN TRANSFERIDO | CC do eleitor: " + user + " | Chave pública: " + pKey;
                } else if (state == 2) {
                    displayText = "VOTO REGISTADO | CC do eleitor: " + user + " | Chave pública: " + pKey;
                } else {
                    displayText = "CC do eleitor: " + user + " | Chave pública: " + pKey;
                }

                modelElectors.addElement(String.valueOf(displayText));
            } catch (Exception e) {
                // Lidar com exceções ao obter o estado do eleitor
            }
        });

        lstElectors.setModel(modelElectors);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane14 = new javax.swing.JScrollPane();
        lstElectors = new javax.swing.JList<>();

        jScrollPane14.setPreferredSize(new java.awt.Dimension(200, 146));

        lstElectors.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        lstElectors.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstElectorsValueChanged(evt);
            }
        });
        jScrollPane14.setViewportView(lstElectors);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1038, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 1026, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 369, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addContainerGap()))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lstElectorsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstElectorsValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_lstElectorsValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JList<String> lstElectors;
    // End of variables declaration//GEN-END:variables
}
